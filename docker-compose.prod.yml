version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    restart: unless-stopped

  # Web Dashboard (Next.js)
  web:
    build: .
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost/api
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
      - ./temp:/app/temp
    restart: unless-stopped

  # API Server (Flask)
  api:
    build: .
    environment:
      - FLASK_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DATABASE_URL=sqlite:///app/bot_data.db
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
      - ./temp:/app/temp
      - ./bot_data.db:/app/bot_data.db
    restart: unless-stopped

  # Telegram Bot
  bot:
    build: .
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WEBHOOK_URL=${WEBHOOK_URL}
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
      - ./temp:/app/temp
      - ./bot_data.db:/app/bot_data.db
    depends_on:
      - api
    restart: unless-stopped

  # Database (PostgreSQL untuk production)
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis untuk caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Monitoring dengan Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  # Grafana untuk monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:
